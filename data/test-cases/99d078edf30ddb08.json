{"uid":"99d078edf30ddb08","name":"Successfully add product to cart from Product page","fullName":"tests.product_page_tests.TestProductPage#test_add_product_to_cart_from_product_page_success","historyId":"b014796db2ec28eab47f02a7cabfb10c","time":{"start":1761642074919,"stop":1761642097535,"duration":22616},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <tests.product_page_tests.TestProductPage object at 0x7f33b3b5c190>\nmain_page = <pages.main_page.MainPage object at 0x7f33ba7cf610>\nproduct_page = <pages.product_page.ProductPage object at 0x7f33b3cbfcb0>\nalert_page = <pages.alert_page.AlertPage object at 0x7f33b3b5e350>\ncart_page = <pages.cart_page.CartPage object at 0x7f33b3b5d950>, product_idx = 0\nquantity = 5, price = 235.0\n\n    @allure.feature('Product page')\n    @allure.story('Add product to cart from Product page')\n    @allure.title('Successfully add product to cart from Product page')\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\n        'product_idx, quantity, price', products_test_data\n    )\n    def test_add_product_to_cart_from_product_page_success(\n        # fmt: off\n        self, main_page, product_page, alert_page, cart_page,\n        product_idx, quantity, price\n        # fmt: on\n    ):\n        main_page.open_main_page(2)\n        product_title, product_price = main_page.open_product_in_new_tab(\n            product_idx\n        )\n>       product_page.add_product_quantity(quantity)\n\ntests/product_page_tests.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/product_page.py:124: in add_product_quantity\n    self.wait_for_quantity_load(previous_quantity)\npages/product_page.py:197: in wait_for_quantity_load\n    self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f8aa4b087dddb59c7fe1e75ef22075e3\")>\nmethod = <function ProductPage.wait_for_quantity_load.<locals>.<lambda> at 0x7f33b2acb380>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1761642074292,"stop":1761642074889,"duration":597},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"main_page","time":{"start":1761642074889,"stop":1761642074902,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page","time":{"start":1761642074902,"stop":1761642074909,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"alert_page","time":{"start":1761642074909,"stop":1761642074915,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"cart_page","time":{"start":1761642074915,"stop":1761642074918,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <tests.product_page_tests.TestProductPage object at 0x7f33b3b5c190>\nmain_page = <pages.main_page.MainPage object at 0x7f33ba7cf610>\nproduct_page = <pages.product_page.ProductPage object at 0x7f33b3cbfcb0>\nalert_page = <pages.alert_page.AlertPage object at 0x7f33b3b5e350>\ncart_page = <pages.cart_page.CartPage object at 0x7f33b3b5d950>, product_idx = 0\nquantity = 5, price = 235.0\n\n    @allure.feature('Product page')\n    @allure.story('Add product to cart from Product page')\n    @allure.title('Successfully add product to cart from Product page')\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\n        'product_idx, quantity, price', products_test_data\n    )\n    def test_add_product_to_cart_from_product_page_success(\n        # fmt: off\n        self, main_page, product_page, alert_page, cart_page,\n        product_idx, quantity, price\n        # fmt: on\n    ):\n        main_page.open_main_page(2)\n        product_title, product_price = main_page.open_product_in_new_tab(\n            product_idx\n        )\n>       product_page.add_product_quantity(quantity)\n\ntests/product_page_tests.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/product_page.py:124: in add_product_quantity\n    self.wait_for_quantity_load(previous_quantity)\npages/product_page.py:197: in wait_for_quantity_load\n    self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f8aa4b087dddb59c7fe1e75ef22075e3\")>\nmethod = <function ProductPage.wait_for_quantity_load.<locals>.<lambda> at 0x7f33b2acb380>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","steps":[{"name":"Open Main page","time":{"start":1761642074919,"stop":1761642076229,"duration":1310},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"idx","value":"2"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Open product from Main page in new tab","time":{"start":1761642076229,"stop":1761642076867,"duration":638},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"product_idx","value":"0"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Add product quantity on Product page","time":{"start":1761642076868,"stop":1761642097534,"duration":20666},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/testshop_selenium_tests/testshop_selenium_tests/pages/product_page.py\", line 124, in add_product_quantity\n    self.wait_for_quantity_load(previous_quantity)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/testshop_selenium_tests/testshop_selenium_tests/pages/product_page.py\", line 197, in wait_for_quantity_load\n    self.wait.until(\n    ~~~~~~~~~~~~~~~^\n        lambda driver: int(self.product_quantity) > initial_quantity\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"quantity","value":"5"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1761642097569,"stop":1761642097634,"duration":65},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Product page"},{"name":"story","value":"Add product to cart from Product page"},{"name":"tag","value":"smoke"},{"name":"tag","value":"regression"},{"name":"tag","value":"product_page"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"product_page_tests"},{"name":"subSuite","value":"TestProductPage"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2115-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.product_page_tests"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"price","value":"235.0"},{"name":"product_idx","value":"0"},{"name":"quantity","value":"5"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["regression","smoke","product_page"]},"source":"99d078edf30ddb08.json","parameterValues":["235.0","0","5"]}