{"uid":"e63fe282fec17357","name":"Product has all the necessary details","fullName":"tests.product_page_tests.TestProductPage#test_product_details","historyId":"cb79f00e286fbf47baa491be64dfc9c9","time":{"start":1761824719230,"stop":1761824742270,"duration":23040},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <tests.product_page_tests.TestProductPage object at 0x7f7c31a9c050>\nmain_page = <pages.main_page.MainPage object at 0x7f7c31bfbcb0>\nproduct_page = <pages.product_page.ProductPage object at 0x7f7c31bfbe00>\n\n    @allure.feature('Product page')\n    @allure.story('Product details on Product Page')\n    @allure.title('Product has all the necessary details')\n    @pytest.mark.smoke\n    def test_product_details(self, main_page, product_page):\n        main_page.open_main_page(2)\n        product_title, product_price = main_page.open_product_in_new_tab(\n            product_index\n        )\n        product_page.assert_product_title_and_price(\n            product_title, product_price\n        )\n        product_page.assert_breadcrumbs_product_title()\n        product_page.assert_product_quantity()\n    \n        product_page.assert_quantity_input_field_is_active()\n>       product_page.assert_plus_and_minus_buttons_work()\n\ntests/product_page_tests.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/product_page.py:149: in assert_plus_and_minus_buttons_work\n    self.wait_for_quantity_load(initial_quantity)\npages/product_page.py:199: in wait_for_quantity_load\n    self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3cbf529c3cd41a14f8c6d032e90dc2d1\")>\nmethod = <function ProductPage.wait_for_quantity_load.<locals>.<lambda> at 0x7f7c30a09bc0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1761824718607,"stop":1761824719219,"duration":612},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"main_page","time":{"start":1761824719219,"stop":1761824719223,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"product_page","time":{"start":1761824719223,"stop":1761824719230,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <tests.product_page_tests.TestProductPage object at 0x7f7c31a9c050>\nmain_page = <pages.main_page.MainPage object at 0x7f7c31bfbcb0>\nproduct_page = <pages.product_page.ProductPage object at 0x7f7c31bfbe00>\n\n    @allure.feature('Product page')\n    @allure.story('Product details on Product Page')\n    @allure.title('Product has all the necessary details')\n    @pytest.mark.smoke\n    def test_product_details(self, main_page, product_page):\n        main_page.open_main_page(2)\n        product_title, product_price = main_page.open_product_in_new_tab(\n            product_index\n        )\n        product_page.assert_product_title_and_price(\n            product_title, product_price\n        )\n        product_page.assert_breadcrumbs_product_title()\n        product_page.assert_product_quantity()\n    \n        product_page.assert_quantity_input_field_is_active()\n>       product_page.assert_plus_and_minus_buttons_work()\n\ntests/product_page_tests.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/product_page.py:149: in assert_plus_and_minus_buttons_work\n    self.wait_for_quantity_load(initial_quantity)\npages/product_page.py:199: in wait_for_quantity_load\n    self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3cbf529c3cd41a14f8c6d032e90dc2d1\")>\nmethod = <function ProductPage.wait_for_quantity_load.<locals>.<lambda> at 0x7f7c30a09bc0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","steps":[{"name":"Open Main page","time":{"start":1761824719231,"stop":1761824720577,"duration":1346},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"idx","value":"2"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Open product from Main page in new tab","time":{"start":1761824720577,"stop":1761824721315,"duration":738},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"product_idx","value":"2"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Assert product title and price","time":{"start":1761824721315,"stop":1761824721399,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"expected_title","value":"'Office Chair Black'"},{"name":"expected_price","value":"'120.50'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Assert breadcrumbs product title matches original product title","time":{"start":1761824721399,"stop":1761824721497,"duration":98},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assert product quantity","time":{"start":1761824721497,"stop":1761824721521,"duration":24},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"expected_quantity","value":"1"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Assert quantity input field is active","time":{"start":1761824721521,"stop":1761824721546,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Assert plus and minus buttons work","time":{"start":1761824721546,"stop":1761824742269,"duration":20723},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/testshop_selenium_tests/testshop_selenium_tests/pages/product_page.py\", line 149, in assert_plus_and_minus_buttons_work\n    self.wait_for_quantity_load(initial_quantity)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/testshop_selenium_tests/testshop_selenium_tests/pages/product_page.py\", line 199, in wait_for_quantity_load\n    self.wait.until(\n    ~~~~~~~~~~~~~~~^\n        lambda driver: int(self.product_quantity) > initial_quantity\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/site-packages/selenium/webdriver/support/wait.py\", line 138, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[{"name":"Assert product quantity","time":{"start":1761824721927,"stop":1761824721952,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"expected_quantity","value":"1"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":8,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"browser::0","time":{"start":1761824742295,"stop":1761824742354,"duration":59},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Product details on Product Page"},{"name":"feature","value":"Product page"},{"name":"tag","value":"smoke"},{"name":"tag","value":"regression"},{"name":"tag","value":"product_page"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"product_page_tests"},{"name":"subSuite","value":"TestProductPage"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2138-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.product_page_tests"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["regression","smoke","product_page"]},"source":"e63fe282fec17357.json","parameterValues":[]}